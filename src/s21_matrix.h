#ifndef S21_MATRIX_H
#define S21_MATRIX_H

#include <math.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

// Константы для статусов
#define SUCCESS 1
#define FAILURE 0

// Структура матрицы
typedef struct matrix_struct {
  double **matrix;
  int rows;
  int columns;
} matrix_t;

// Виды случаев
typedef enum { OK, INCORRECT_MATRIX, CALCULATION_ERROR } s21_error_code_t;

// Функции для работы с матрицами
/**
 * @brief Создает матрицу и физически выделяет для нее место в памяти (в
 * ячейке)
 * @param rows количество строк
 * @param columns количество столбцов
 * @param результирующий указатель на ячейку памяти, в которой должна быть
 * создана матрица
 *
 * @return КОД ОШИБКИ :
 * 0 - ОК,
 * 1 - Ошибка, неверная матрица,
 * 2 - Ошибка вычисления (несоответствующие размеры матрицы; матрица, для
 * которой вычисления не могут быть выполнены и т.д.)
 */
int s21_create_matrix(int rows, int columns, matrix_t *result);

/**
 * @brief Удаляет матрицу и освобождает выделенные области в памяти
 * @param А Указатель на матрицу
 */
void s21_remove_matrix(matrix_t *A);
/**
 * @brief Сравнивает две матрицы. Они считаются одинаковыми, если имеют
 * одинаковый размер и все элементы A[i][j] == B[i][j]
 * @param A  указатель на первую матрицу
 * @param B  указатель на вторую матрицу
 * @return 0 - ОШИБКА,
 * @return 1 - УСПЕХ
 */
int s21_eq_matrix(matrix_t *A, matrix_t *B);
/**
 * @brief Сумма двух матриц A = m × n и B = m × n одинакового размера равна
 * матрице C = m × n = A + B одинакового размера, элементы которой определяются
 * уравнения C(i,j) = A(i,j) + B(i,j). Сравнение должно быть выполнено с
 * точностью до , включая 7 знаков после запятой
 * @param A указатель на первую матрицу
 * @param B указатель на вторую матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - OK
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_sum_matrix(matrix_t *A, matrix_t *B, matrix_t *result);
/**
 * @brief Разница двух матриц A = m × n и B = m × n одинакового размера
 * это матрица C = m × n = A - B одинакового размера, элементы которой равны
 * определяется уравнениями C(i,j) = A(i,j) - B(i,j)
 * @param A  указатель на первую матрицу
 * @param B  указатель на вторую матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствующие размеры матрицы; матрица, для
 * которой вычисления не могут быть выполнены и т.д.)
 */
int s21_sub_matrix(matrix_t *A, matrix_t *B, matrix_t *result);
/**
 * @brief Произведением матрицы A = m × n на число λ является матрица B =
 * m × n = λ × A, элементы которой определяются уравнениями B = λ × A(i,j).
 * @param A указатель на входную матрицу
 * @param number действительное число
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_mult_number(matrix_t *A, double number, matrix_t *result);
/**
 * @brief Произведение A = m × k на B = k × n представляет собой матрицу C = m ×
 * n = A × B размером m × n, элементы которой определяются уравнением C(i,j) =
 * A(i,1) × B(1,j) + A(i,2) × B(2,j) + ... + A(i,k) × B(k,j)
 * @param A указатель на первую матрицу
 * @param B указатель на вторую матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_mult_matrix(matrix_t *A, matrix_t *B, matrix_t *result);
/**
 * @brief Транспонирование матрицы A заключается в замене ее строк столбцами
 * с сохранением их номеров
 * @param A указатель на входную матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_transpose(matrix_t *A, matrix_t *result);
/**
 * @brief Алгебраическим дополнением элемента матрицы является значение младшего
 *элемента , умноженное на -1^(i+j)
 * @param A указатель на входную матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 *вычисления не могут быть выполнены и т.д.)
 */
int s21_calc_complements(matrix_t *A, matrix_t *result);
/**
 * @brief Детерминант - это число, связанное с каждой квадратной матрицей
 * и вычисляемое из элементов. Детерминант может быть вычислен только для
 * квадратной матрицы.
 * @param A указатель на входную матрицу
 * @param result указатель на результирующую матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_determinant(matrix_t *A, double *result);
/**
 * @brief Матрица A в степени -1 называется обратной квадратной матрице
 * A, если произведение этих матриц равно единичной матрице. Если определитель
 * матрицы равен нулю, то она не имеет обратной матрицы.
 * @param A указатель на входную матрицу
 * @param result указатель на входную матрицу
 * @return КОД ОШИБКИ :
 * 0 - ОК
 * 1 - Ошибка, неверная матрица
 * 2 - Ошибка вычисления (несоответствие размеров матрицы; матрица, для которой
 * вычисления не могут быть выполнены и т.д.)
 */
int s21_inverse_matrix(matrix_t *A, matrix_t *result);

#include "functions/s21_helper_functions.h"
#endif  // S21_MATRIX_H
